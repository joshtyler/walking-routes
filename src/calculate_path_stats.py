#!/usr/bin/python3

import argparse
from lxml import etree
import sys
from dataclasses import dataclass
import geopy.distance

@dataclass
class Stats:
	distance : geopy.distance.Distance  = geopy.distance.Distance(0)
	minlat  : float = float("NaN")
	maxlat  : float = float("NaN")
	minlong : float = float("NaN")
	maxlong : float = float("NaN")

# Annoyingly KML files have the default namespace set to this
# This is a bit of a pain to parse in lxml, but oh well...
kml_default_namespace="http://www.opengis.net/kml/2.2"
ns = {"kml":kml_default_namespace}

def process_file(file):
	# Parse our input generated by gpsbabel as an element tree
	paths = etree.parse(file).getroot().findall(".//kml:LineString",ns)
	assert(len(paths) == 1)
	path = paths[0]

	coordinates = path.findall("./kml:coordinates",ns)[0].text.split()
	coordinates = [c.split(',') for c in coordinates if not c.isspace()] # Remove whitespace
	coordinates = [(float(c[1]),float(c[0])) for c in coordinates] # Convert to tuple of floats in normal order
	assert len(coordinates) > 1

	s = Stats()
	last_c = coordinates[0]
	s.distance = geopy.distance.Distance(0)
	s.minlat = s.maxlat = last_c[0]
	s.minlong = s.maxlong = last_c[1]
	for c in coordinates[1:]:
		s.distance = s.distance + geopy.distance.distance(last_c, c)
		if c[0] < s.minlat:
			s.minlat = c[0]
		if c[0] > s.maxlat:
			s.maxlat = c[0]
		if c[1] < s.minlong:
			s.minlong = c[1]
		if c[1] > s.minlong:
			s.minlong = c[1]
		last_c = c

	print(s)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="Calculate stats for a path in a KML file")
	parser.add_argument('file', metavar='F', type=str, help='KML filee to process')
	args = parser.parse_args()

	process_file(args.file)
